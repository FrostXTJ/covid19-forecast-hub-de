dplyr::select(grep("location",names(data)),grep("date",names(data)),everything())
if (names(data)[grep("date",names(data))]!="date"){
data<-data %>%
dplyr::rename(date=names(data)[grep("date",names(data))])
}
if (sum(grepl("location_name",names(data)))>0 & !("location" %in% names(data))){
data<-data %>%
dplyr::rename(location=location_name)
}
if (sum(grepl("V1",names(data)))>0){
data<-data %>%
dplyr::select(-"V1")
}
# data <- data %>%
#  dplyr::select(-names(data)[which(grepl("location",names(data)))])#[-which(names(data)[which(grepl("location",names(data))==TRUE)]=="location")])
## read state code
state_fips_codes<-read.csv("state_codes_germany.csv",stringsAsFactors = FALSE)[,-1]
col_list1 <- c(grep("location", colnames(data)),grep("date", colnames(data)),grep("death", colnames(data)))
death_qntl1 <- data[,col_list1] %>%
dplyr::rename(date_v=date) %>%
# dplyr::filter(as.Date(as.character(date_v)) %in% c(forecast_date+1:7)) %>%
dplyr::filter(as.Date(as.character(date_v)) > forecast_date) %>%
dplyr::mutate(target_id=paste(difftime(as.Date(as.character(date_v)),forecast_date,units="days"),"day ahead inc death")) %>%
dplyr::rename("0.025"=deaths_lower,"0.975"=deaths_upper,"NA"=deaths_mean) %>%
gather(quantile, value, -c(location, date_v, target_id)) %>%
dplyr::left_join(state_fips_codes, by=c("location"="state_name")) %>%
dplyr::rename(location_id=state_code) %>%
dplyr::mutate(type=ifelse(quantile=="NA","point","quantile"),forecast_date=forecast_date) %>%
dplyr::rename(target_end_date=date_v)
col_list2 <- c(grep("location", colnames(data)),grep("date", colnames(data)),grep("totdea",colnames(data)))
death_qntl2 <- data[,c(col_list2)] %>%
dplyr::rename(date_v=date) %>%
# dplyr::filter(as.Date(as.character(date_v)) %in% c(forecast_date+1:7)) %>%
dplyr::filter(as.Date(as.character(date_v)) > forecast_date) %>%
dplyr::mutate(target_id=paste(difftime(as.Date(as.character(date_v)),forecast_date,units="days"),"day ahead cum death")) %>%
dplyr::rename("0.025"=totdea_lower,"0.975"=totdea_upper,"NA"=totdea_mean) %>%
gather(quantile, value, -c(location, date_v, target_id)) %>%
dplyr::left_join(state_fips_codes, by=c("location"="state_name")) %>%
dplyr::rename(location_id=state_code) %>%
dplyr::mutate(type=ifelse(quantile=="NA","point","quantile"),forecast_date=forecast_date) %>%
dplyr::rename(target_end_date=date_v)
# add hospitalization daily incident (admis)
col_list3 <- c(grep("location", colnames(data)),grep("date", colnames(data)),grep("admis",colnames(data)))
death_qntl3 <- data[,c(col_list3)] %>%
dplyr::rename(date_v=date) %>%
# dplyr::filter(as.Date(as.character(date_v)) %in% c(forecast_date+1:7)) %>%
dplyr::filter(as.Date(as.character(date_v)) > forecast_date) %>%
dplyr::mutate(target_id=paste(difftime(as.Date(as.character(date_v)),forecast_date,units="days"),"day ahead inc hosp")) %>%
dplyr::rename("0.025"=admis_lower,"0.975"=admis_upper,"NA"=admis_mean) %>%
gather(quantile, value, -c(location, date_v, target_id)) %>%
dplyr::left_join(state_fips_codes, by=c("location"="state_name")) %>%
dplyr::rename(location_id=state_code) %>%
dplyr::mutate(type=ifelse(quantile=="NA","point","quantile"),forecast_date=forecast_date) %>%
dplyr::rename(target_end_date=date_v)
# add if for forecast date weekly
# if (lubridate::wday(forecast_date,label = TRUE, abbr = FALSE)=="Sunday"|lubridate::wday(forecast_date,label = TRUE, abbr = FALSE)=="Monday"){
#   death_qntl2_1 <- data[,c(col_list2)] %>%
#     dplyr::rename(date_v=date) %>%
#     dplyr::mutate(day_v=lubridate::wday(date_v,label = TRUE, abbr = FALSE),
#                   ew=unname(MMWRweek(date_v)[[2]])) %>%
#     # dplyr::filter(day_v =="Saturday" &
#     #                 ew<unname(MMWRweek(forecast_date)[[2]])+6 &
#     #                 ew>unname(MMWRweek(forecast_date)[[2]])-1) %>%
#     dplyr::filter(day_v =="Saturday" & ew>unname(MMWRweek(forecast_date)[[2]])-1) %>%
#     dplyr::mutate(target_id=paste((ew-(unname(MMWRweek(forecast_date)[[2]]))+1),"wk ahead cum death"))
# } else {
#   death_qntl2_1 <- data[,c(col_list2)] %>%
#     dplyr::rename(date_v=date) %>%
#     dplyr::mutate(day_v=lubridate::wday(date_v,label = TRUE, abbr = FALSE),
#                   ew=unname(MMWRweek(date_v)[[2]])) %>%
#     # dplyr::filter(day_v =="Saturday" &
#     #                 ew<(unname(MMWRweek(forecast_date)[[2]])+1)+6 &
#     #                 ew>unname(MMWRweek(forecast_date)[[2]])) %>%
#     dplyr::filter(day_v =="Saturday" & ew>unname(MMWRweek(forecast_date)[[2]])) %>%
#     dplyr::mutate(target_id=paste((ew-(unname(MMWRweek(forecast_date)[[2]])+1))+1,"wk ahead cum death"))
# }
# death_qntl2_2 <- death_qntl2_1 %>%
#   dplyr::rename("0.025"=totdea_lower,"0.975"=totdea_upper,"NA"=totdea_mean) %>%
#   gather(quantile, value, -c(location, date_v, day_v, ew, target_id)) %>%
#   dplyr::left_join(state_fips_codes, by=c("location"="state_name")) %>%
#   dplyr::rename(location_id=state_code,target_end_date=date_v) %>%
#   dplyr::mutate(type=ifelse(quantile=="NA","point","quantile"),forecast_date=forecast_date) %>%
#   dplyr::select(-"day_v",-"ew")
# combining data
comb <-rbind(death_qntl1,death_qntl2,death_qntl3) #deleted death_qntl2_2, needs to be added later
comb$location[which(comb$location=="Germany")] <- "Germany"
comb$location_id[which(comb$location=="Germany")] <- "Germany"
comb <- comb %>%
dplyr::filter(!is.na(location_id)) %>%
dplyr::rename(location_name=location)
comb$quantile[which(comb$quantile=="NA")] <- NA
comb$quantile <- as.numeric(comb$quantile)
comb$value <- as.numeric(comb$value)
final<- comb %>%
dplyr::select(forecast_date,target_id,target_end_date,location_id,location_name,type,quantile,value) %>%
dplyr::rename(target=target_id,location=location_id) %>%
arrange(location,type,quantile,target)
final$location[which(nchar(final$location)==1)] <- paste0(0,final$location[which(nchar(final$location)==1)])
return(final)
}
## list all files and read
filepaths <- list.files("./",pattern = "Hospitalization_all_locs.csv", recursive =TRUE,full.names = TRUE)
#if (length(newfile_date)) {
#  new_filepath <- filepaths[grepl(gsub("-", "_",newfile_date),filepaths)]
for(i in 1:length(filepaths)){
formatted_file <- make_qntl_dat(filepaths[i])
# date <- gsub("_", "-",substr(dirname(new_filepath[i]),
#                              start = date_offset +  1,
#                              stop  = date_offset + 10))
date<-get_date(filepaths[i])
write_csv(formatted_file,
path = paste0("../../data-processed/IHME-CurveFit/",
date,
"-IHME-CurveFit.csv"))
}
path
source("code/validation/functions_plausibility.R")
source("./code/validation/functions_plausibility.R")
source("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub/code/validation/functions_plausibility.R")
# make sure locale is English US
Sys.setlocale(category = "LC_TIME", locale = "en_US.UTF8")
directories <- list.dirs("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub_de/data-processed")[-1]
directories
plausibility_checks <- list()
for(dir in directories){
plausibility_checks[[dir]] <- validate_directory(dir)
}
directories <- list.dirs("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub_de/data-processed")[-c(1,2)]
plausibility_checks <- list()
for(dir in directories){
plausibility_checks[[dir]] <- validate_directory(dir)
}
getwd()
?list.files
setwd("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub_de/data-raw/Imperial")
filepaths <- list.files(pattern = ".rds", recursive =TRUE,full.names = TRUE)
path<-filepaths[1]
data_raw<-readRDS(path)
load("C:/Users/yu4305/Downloads/Team.input/data_2020-03-08.rds")
input_1<-readRDS("C:/Users/yu4305/Downloads/Team.input/data_2020-03-08.rds")
View(input_1)
for(i in 1:length(filepaths))
{print(readRDS(filepaths[i])$Country)}
print(readRDS(filepaths[i])$Country \n)
for(i in 1:length(filepaths))
{
print(readRDS(filepaths[i])$Country \n)
}
for(i in 1:length(filepaths))
{
print(readRDS(filepaths[i])$Country)
print("\n")
}
reported_countries<-list(length=length(filepaths))
View(reported_countries)
reported_countries<-list()
for(i in 1:length(filepaths))
{
reported_countries[i]<-readRDS(filepaths[i])$Country
}
warnings()
reported_countries<-list()
for(i in 1:length(filepaths))
{
reported_countries[[i]]<-readRDS(filepaths[i])$Country
}
reported_countries
load("C:/Users/yu4305/Downloads/Imperial_RData/DeCa_Std_results_week_end_2020-03-08.rds")
new_input.1<-readRDS("C:/Users/yu4305/Downloads/Imperial_RData/DeCa_Std_results_week_end_2020-03-08.rds")
filepaths <- list.files(pattern = "DeCa", recursive =TRUE,full.names = TRUE)
reported_countries<-list()
for(i in 1:length(filepaths))
{
reported_countries[[i]]<-readRDS(filepaths[i])$Country
}
reported_countries
germany_reported<-rep(NA,length(filepaths))
reported_countries[[i]]=="Germany"
reported_countries[[1]]=="Germany"
sum(reported_countries[[1]]=="Germany")
sum(reported_countries[[9]]=="Germany")
for(i in 1:length(filepaths))
{
reported_countries[[i]]<-readRDS(filepaths[i])$Country
germany_reported[i]<-as.logical(sum(reported_countries[[i]]=="Germany"))
}
germany_reported
filepaths
filepaths<-filepaths[germany_reported]
filepaths <- list.files(pattern = "DeCa", recursive =TRUE,full.names = TRUE)
reported_countries<-list()
germany_reported<-rep(NA,length(filepaths))
for(i in 1:length(filepaths))
{
reported_countries[[i]]<-readRDS(filepaths[i])$Country
germany_reported[i]<-as.logical(sum(reported_countries[[i]]=="Germany"))
}
filepaths<-filepaths[germany_reported]
filepaths
germany_reported
path<-filepaths[1]
path
date_publish<-substr(path,start=nchar(path)-14.stop=nchar(path)-4)
date_publish<-substr(path,start=nchar(path)-14,stop=nchar(path)-4)
date_publish
date_publish<-substr(path,start=nchar(path)-13,stop=nchar(path)-4)
date_publish
date_publish<-as.Date(substr(path,start=nchar(path)-13,stop=nchar(path)-4))
data_raw<-readRDS(path)
date_publish<-as.Date(substr(path,start=nchar(path)-13,stop=nchar(path)-4))
View(data_raw)
data_raw<-readRDS(path)$Predictions$Germany
sum(data_raw[[1]]-data_raw[[2]])
for (i in 1:length(filepaths))
format_imperial<-function(path)
{
data_raw<-readRDS(path)$Predictions$Germany
date_publish<-as.Date(substr(path,start=nchar(path)-13,stop=nchar(path)-4))
return(sum(data_raw[[1]]-data_raw[[2]]))
}
for (i in 1:length(filepaths))
{
format_imperial(i)
}
for (i in filepaths)
{
format_imperial(i)
}
sums<-rep(NA,length(filepaths))
for (i in 1:length(filepaths))
{
sums[i]<-format_imperial(filepaths[i])
}
sums
data_raw<-readRDS(path)$Predictions$Germany[[1]]
?apply
getwd()
setwd("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub_de/data-truth/RKI")
rki_raw<-read.csv("RKI_COVID19.csv")
rki_raw<-read.csv("RKI_COVID19.csv",stringsAsFactors = FALSE)
colnames(rki_raw)[8]
summary(rki_raw)
rki_agg_death<-aggregate(rki_raw[,c(8,13)],list(rki_raw[,10]))
rki_agg_death<-aggregate(rki_raw[,c(8,13)],list(rki_raw[,10]),sum)
rki_raw$Meldedatum[1:19]
as.Date(rki_raw$Meldedatum[1:19])
rki_raw$Meldedatum<-as.Date(rki_raw$Meldedatum)
rki_agg_death<-aggregate(rki_raw[,c(8,13)],list(rki_raw[,10]),sum)
?aggregate
summary(rki_raw)
unique(rki_raw$NeuerTodesfall)
unique(rki_raw$Todesfall)
unique(rki_raw$AnzahlTodesfall)
test<-sapply(rki_raw$NeuerTodesfall,function(x){
ifelse(x<0,0,x)})
summary(test)
sum(test)
rki_raw<-read.csv("RKI_COVID19.csv",stringsAsFactors = FALSE)
rki_raw$Meldedatum<-as.Date(rki_raw$Meldedatum)
getwd()
setwd("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub_de/data-truth/JHU")
jhu_raw<-read.csv("time_series_covid19_deaths_global.csv")
?read.csv
jhu_germany<-jhu_raw[jhu_raw$Country.Region=="Germany",]
jhu_raw<-read.csv("time_series_covid19_deaths_global.csv",stringsAsFactors = FALSE)
jhu_germany<-jhu_raw[jhu_raw$Country.Region=="Germany",]
dates<-seq(as.date("2020-01-22"),as.Date("2020-05-06"),by="days")
dates<-seq(as.Date("2020-01-22"),as.Date("2020-05-06"),by="days")
t(jhu_germany[1,-c(1:4)])
dates<-seq(as.Date("2020-01-22"),as.Date("2020-05-08"),by="days")
jhu_truth_germany<-data.frame(date=dates,location=rep("Germany",length(dates)),
location_name=rep("Germany",length(dates)),
value=t(jhu_germany[1,-c(1:4)]))
jhu_truth_germany
jhu_truth_germany_cum<-data.frame(date=dates,location=rep("Germany",length(dates)),
location_name=rep("Germany",length(dates)),
value=t(jhu_germany[1,-c(1:4)]))
jhu_truth_germany_cum<-data.frame(date=dates,location=rep("Germany",length(dates)),
location_name=rep("Germany",length(dates)),
value=as.numeric(t(jhu_germany[1,-c(1:4)])))
inc_deaths<-diff(jhu_truth_germany_cum$value,lag=1)
cbind(inc_deaths,jhu_truth_germany_cum$value)
jhu_truth_germany_inc$value<-c(0,inc_deaths)
jhu_truth_germany_inc<-jhu_truth_germany_cum
jhu_truth_germany_inc$value<-c(0,inc_deaths)
cbind(jhu_truth_germany_cum$value,jhu_truth_germany_inc$value)
?write.csv
write.csv(jhu_truth_germany_cum,file="../truth-Cumulative Deaths_Germany.csv")
write.csv(jhu_truth_germany_inc,file="../truth-Incident Deaths_Germany.csv")
getwd()
setwd("../../")
getwd()
#' Calculate the date of the next Saturday
#'
#' @param date date for calculation
#'
#' @return a date of the subsequent Saturday. if date is a Saturday, it will return this day itself.
get_next_saturday <- function(date) {
require(lubridate)
date <- as.Date(date)
## calculate days until saturday (day 7)
diff <- 7 - wday(date)
## add to given date
new_date <- diff + date
return(new_date)
}
#' Read in and transform matrix of samples for one location into a quantile-format data_frame
#'
#' @param path Path of raw file location
#' @param location the FIPS code for the location for this matrix
#' @param qntls set of quantiles for which forecasts will be computed, defaults to c(0.025, 0.1, 0.2, .5, 0.8, .9, 0.975)
#'
#' @return long-format data_frame with quantiles
#'
#' @details Assumes that the matrix gives 1 through 7 day ahead forecasts
#'
format_imperial<-function(path,location="Germany", qntls=c(0.01, 0.025, seq(0.05, 0.95, by=0.05), 0.975, 0.99))
{
require(tidyverse)
require(lubridate)
#only take first since both are identical for Germany
data_raw<-readRDS(path)$Predictions$Germany[[1]]
date_publish<-as.Date(substr(path,start=nchar(path)-13,stop=nchar(path)-4))
#get timezero as in Reichlab function, i.e. date of official forecast collection
timezero<-data_publish
## create tables corresponding to the days for each of the targets
day_aheads <- tibble(
target = paste(1:7, "day ahead inc death"),
target_cum = paste(1:7, "day ahead cum death"),
target_end_date = timezero+1:7)
week_aheads <- tibble(
target = "1 wk ahead inc death",
target_cum = "1 wk ahead cum death",
target_end_date = get_next_saturday(timezero) + (wday(timezero)>2)*7)
## make cumulative death counts
obs_data <- read_csv("../../data-truth/truth-Cumulative Deaths_Germany.csv") %>%
mutate(date = as.Date(date, "%m/%d/%y"))
last_obs_date <- as.Date(colnames(sample_mat)[1])-1
last_obs_death <- obs_data$value[which(obs_data$location=="Germany" & obs_data$date==last_obs_date)]
sample_mat_cum <- matrixStats::rowCumsums(as.matrix(sample_mat)) + last_obs_death
## indices and samples for incident deaths
which_days <- which(colnames(sample_mat) %in% as.character(day_aheads$target_end_date))
which_weeks <- which(colnames(sample_mat) %in% as.character(week_aheads$target_end_date))
samples_daily <- sample_mat[,which_days]
samples_weekly <- sample_mat[,which_weeks]
samples_daily_cum <- sample_mat_cum[,which_days]
samples_weekly_cum <- sample_mat_cum[,which_weeks]
## choosing quantile type=1 b/c more compatible with discrete samples
## other choices gave decimal answers
qntl_daily <- apply(samples_daily, FUN=function(x) quantile(x, qntls, type=1), MAR=2)
colnames(qntl_daily) <- day_aheads$target[which(day_aheads$target_end_date %in% as.Date(colnames(samples_daily)))]
qntl_daily_long <- as_tibble(qntl_daily) %>%
mutate(location=location, quantile = qntls, type="quantile") %>%
pivot_longer(cols=contains("day ahead"), names_to = "target") %>%
inner_join(day_aheads)
## daily cumulative quantiles
qntl_daily_cum <- apply(samples_daily_cum, FUN=function(x) quantile(x, qntls, type=1), MAR=2)
colnames(qntl_daily_cum) <- day_aheads$target_cum[which(day_aheads$target_end_date %in% as.Date(colnames(samples_daily)))]
qntl_daily_cum_long <- as_tibble(qntl_daily_cum) %>%
mutate(location=location, quantile = qntls, type="quantile") %>%
pivot_longer(cols=contains("day ahead"), names_to = "target") %>%
inner_join(day_aheads, by=c("target" = "target_cum"))
if(is.null(dim(samples_weekly))){
## if only one week
qntl_weekly <- enframe(quantile(samples_weekly, qntls, type=1)) %>% select(value)
colnames(qntl_weekly) <- "1 wk ahead inc death"
qntl_weekly_long <- qntl_weekly %>%
mutate(location=location, quantile = qntls, type="quantile") %>%
pivot_longer(cols=contains("wk ahead"), names_to = "target") %>%
inner_join(week_aheads)
qntl_weekly_cum <- enframe(quantile(samples_weekly_cum, qntls, type=1)) %>% select(value)
colnames(qntl_weekly_cum) <- "1 wk ahead cum death"
qntl_weekly_cum_long <- qntl_weekly_cum %>%
mutate(location=location, quantile = qntls, type="quantile") %>%
pivot_longer(cols=contains("wk ahead"), names_to = "target") %>%
inner_join(week_aheads, by=c("target" = "target_cum"))
} else {
## if there are more than 1 weeks
qntl_weekly <- apply(samples_weekly, FUN=function(x) quantile(x, qntls, type=1), MAR=2)
colnames(qntl_weekly) <- week_aheads$target[which(week_aheads$target_end_date %in% as.Date(colnames(qntl_weekly)))]
qntl_weekly_long <- as_tibble(qntl_weekly) %>%
mutate(location=location, quantile = qntls, type="quantile") %>%
pivot_longer(cols=contains("wk ahead"), names_to = "target") %>%
inner_join(week_aheads)
qntl_weekly_cum <- apply(samples_weekly_cum, FUN=function(x) quantile(x, qntls, type=1), MAR=2)
colnames(qntl_weekly_cum) <- week_aheads$target[which(week_aheads$target_end_date %in% as.Date(colnames(samples_weekly)))]
qntl_weekly_cum_long <- as_tibble(qntl_weekly_cum) %>%
mutate(location=location, quantile = qntls, type="quantile") %>%
pivot_longer(cols=contains("wk ahead"), names_to = "target") %>%
inner_join(week_aheads, by=c("target" = "target_cum"))
}
qntl_dat_long <- bind_rows(
qntl_daily_long, qntl_weekly_long,
qntl_daily_cum_long, qntl_weekly_cum_long
)
point_ests <- qntl_dat_long %>%
filter(quantile==0.5) %>%
mutate(quantile=NA, type="point")
all_dat <- bind_rows(qntl_dat_long, point_ests) %>%
arrange(type, target, quantile) %>%
mutate(quantile = round(quantile, 3), forecast_date = timezero) %>%
select(forecast_date, target, target_end_date,location,type,quantile,value)
return(all_dat)
}
i=21
i=1
#read in file paths and delete those without Germany in them
filepaths <- list.files(pattern = "DeCa", recursive =TRUE,full.names = TRUE)
reported_countries<-list()
germany_reported<-rep(NA,length(filepaths))
germany_reported<-rep(NA,length(filepaths))
for(i in 1:length(filepaths))
{
reported_countries[[i]]<-readRDS(filepaths[i])$Country
germany_reported[i]<-as.logical(sum(reported_countries[[i]]=="Germany"))
}
filepaths<-filepaths[germany_reported]
i=1
formatted_file <- format_imperial(path=filepaths[i])
source('~/GitHub/covid19-forecast-hub_de/data-raw/Imperial/Imperial-processing_Germany.R', echo=TRUE)
formatted_file <- format_imperial(path=filepaths[i])
getwd()
setwd("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub_de/data-raw/Imperial")
#read in file paths and delete those without Germany in them
filepaths <- list.files(pattern = "DeCa", recursive =TRUE,full.names = TRUE)
reported_countries<-list()
germany_reported<-rep(NA,length(filepaths))
for(i in 1:length(filepaths))
{
reported_countries[[i]]<-readRDS(filepaths[i])$Country
germany_reported[i]<-as.logical(sum(reported_countries[[i]]=="Germany"))
}
filepaths<-filepaths[germany_reported]
i=1
formatted_file <- format_imperial(path=filepaths[i])
path=filepaths[1]
location="Germany"
qntls=c(0.01, 0.025, seq(0.05, 0.95, by=0.05), 0.975, 0.99)
require(tidyverse)
require(lubridate)
#only take first since both are identical for Germany
data_raw<-readRDS(path)$Predictions$Germany[[1]]
date_publish<-as.Date(substr(path,start=nchar(path)-13,stop=nchar(path)-4))
#get timezero as in Reichlab function, i.e. date of official forecast collection
timezero<-date_publish
colnames(data_raw)
date_publish<-as.Date(substr(path,start=nchar(path)-13,stop=nchar(path)-4))
#get timezero as in Reichlab function, i.e. date of official forecast collection
timezero<-date_publish
## create tables corresponding to the days for each of the targets
day_aheads <- tibble(
target = paste(1:7, "day ahead inc death"),
target_cum = paste(1:7, "day ahead cum death"),
target_end_date = timezero+1:7)
week_aheads <- tibble(
target = "1 wk ahead inc death",
target_cum = "1 wk ahead cum death",
target_end_date = get_next_saturday(timezero) + (wday(timezero)>2)*7)
day_aheads
week_aheads <- tibble(
target = "1 wk ahead inc death",
target_cum = "1 wk ahead cum death",
target_end_date = get_next_saturday(timezero) + (wday(timezero)>2)*7)
week_aheads
## make cumulative death counts
obs_data <- read_csv("../../data-truth/truth-Cumulative Deaths_Germany.csv") %>%
mutate(date = as.Date(date, "%m/%d/%y"))
getwd()
?read_csv
test<-read.csv("../../data-truth/truth-Cumulative Deaths_Germany.csv")
getwd()
test2<-read_csv("C:/Users/yu4305/Documents/GitHub/covid19-forecast-hub_de/data-truth/truth-Cumulative Deaths_Germany.csv")
jhu_truth_germany_cum
?write.csv
write.csv(jhu_truth_germany_cum,file="../truth-Cumulative Deaths_Germany.csv",row.names=FALSE)
write.csv(jhu_truth_germany_inc,file="../truth-Incident Deaths_Germany.csv",row.names=FALSE)
getwd()
## make cumulative death counts
obs_data <- read_csv("../../data-truth/truth-Cumulative Deaths_Germany.csv") %>%
mutate(date = as.Date(date, "%m/%d/%y"))
last_obs_date <- as.Date(colnames(data_raw)[1])-1
last_obs_death <- obs_data$value[which(obs_data$location=="Germany" & obs_data$date==last_obs_date)]
sample_mat_cum <- matrixStats::rowCumsums(as.matrix(data_raw)) + last_obs_death
colnames(data_raw)[1]
sample_mat_cum <- matrixStats::rowCumsums(as.matrix(data_raw)) + last_obs_death
View(sample_mat_cum)
?matrixStats::rowCumsums
View(data_raw)
day_aheads$target_end_date)
day_aheads$target_end_date
## indices and samples for incident deaths
which_days <- which(colnames(data_raw) %in% as.character(day_aheads$target_end_date))
which_weeks <- which(colnames(data_raw) %in% as.character(week_aheads$target_end_date))
samples_daily <- data_raw[,which_days]
samples_weekly <- data_raw[,which_weeks]
samples_daily_cum <- sample_mat_cum[,which_days]
samples_weekly_cum <- sample_mat_cum[,which_weeks]
## choosing quantile type=1 b/c more compatible with discrete samples
## other choices gave decimal answers
qntl_daily <- apply(samples_daily, FUN=function(x) quantile(x, qntls, type=1), MAR=2)
colnames(qntl_daily) <- day_aheads$target[which(day_aheads$target_end_date %in% as.Date(colnames(samples_daily)))]
qntl_daily_long <- as_tibble(qntl_daily) %>%
mutate(location=location, quantile = qntls, type="quantile") %>%
pivot_longer(cols=contains("day ahead"), names_to = "target") %>%
inner_join(day_aheads)
??pivot_longer
require(tidyverse)
library(tidyverse)
tidyverse::tidyverse_conflicts()
old.packages()
update.packages()
update.packages(ask = FALSE)
